# Generated by Django 2.1.2 on 2018-10-26 01:49

from django.conf import settings
import django.core.files.storage
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BurningPrescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('scorch', models.PositiveIntegerField(blank=True, help_text='Maximum Scorch Height (m)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)], verbose_name='Scorch Height')),
                ('min_area', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Min Area to be Burnt (%)')),
                ('max_area', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Max Area to be Burnt (%)')),
                ('ros_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='Min ROS (m/h)')),
                ('ros_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='Max ROS (m/h)')),
                ('ffdi_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Min FFDI')),
                ('ffdi_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Max FFDI')),
                ('gfdi_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Min GFDI')),
                ('gfdi_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Max GFDI')),
                ('temp_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)], verbose_name='Min Temp (degrees C)')),
                ('temp_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)], verbose_name='Max Temp (degress C)')),
                ('rh_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Min Relative Humidity (%)')),
                ('rh_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Max Relative Humidity (%)')),
                ('sdi', models.TextField(blank=True, null=True, verbose_name='SDI')),
                ('smc_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Min Surface Moisture Content (%)')),
                ('smc_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Max Surface Moisture Content (%)')),
                ('pmc_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Min Profile Moisture Content (%)')),
                ('pmc_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Max Profile Moisture Content (%)')),
                ('wind_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='Min Wind Speed (km/h)')),
                ('wind_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='Max Wind Speed (km/h)')),
                ('wind_dir', models.TextField(blank=True, null=True, verbose_name='Wind Direction')),
                ('grassland_curing_min', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='Grassland Curing % Min')),
                ('grassland_curing_max', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='Grassland Curing % Max')),
            ],
            options={
                'verbose_name_plural': 'Burning Prescriptions',
                'verbose_name': 'Burning Prescription',
            },
        ),
        migrations.CreateModel(
            name='EdgingPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('location', models.TextField(blank=True, help_text='Textual description of edge & its location', null=True, verbose_name='Edge Location')),
                ('desirable_season', models.PositiveSmallIntegerField(blank=True, choices=[(8, 'Annual')], null=True, verbose_name='Desirable Season')),
                ('strategies', models.TextField(blank=True, help_text='Textual description of strategies for this plan', null=True)),
                ('ffdi_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Min FFDI')),
                ('ffdi_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max FFDI')),
                ('gfdi_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Min GFDI')),
                ('gfdi_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max GFDI')),
                ('sdi', models.TextField(blank=True, null=True, verbose_name='SDI')),
                ('wind_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Min Wind Speed (km/h)')),
                ('wind_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max Wind speed (km/h)')),
                ('wind_dir', models.TextField(blank=True, null=True, verbose_name='Wind Direction')),
                ('ros_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Min ROS (m/h)')),
                ('ros_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max ROS (m/h)')),
                ('grassland_curing_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Grassland Curing % Min')),
                ('grassland_curing_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Grassland Curing % Max')),
            ],
            options={
                'ordering': ['created'],
                'verbose_name_plural': 'Edging Plans',
                'verbose_name': 'Edging Plan',
            },
        ),
        migrations.CreateModel(
            name='ExclusionArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.TextField()),
                ('location', models.TextField()),
                ('detail', models.TextField(verbose_name='How will fire be excluded?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IgnitionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='LightingSequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('seqno', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99)], verbose_name='Lighting Sequence Number')),
                ('cellname', models.TextField(verbose_name='Cell Name')),
                ('strategies', models.TextField(help_text='Textual description of strategies for this sequence')),
                ('wind_min', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MaxValueValidator(200)], verbose_name='Min Wind Speed (km/h)')),
                ('wind_max', models.PositiveIntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='Max Wind Speed (km/h)')),
                ('wind_dir', models.TextField(verbose_name='Wind Direction')),
                ('fuel_description', models.TextField(help_text='Textual description of the fuel for this sequence')),
                ('fuel_age', models.PositiveSmallIntegerField(blank=True, help_text='Fuel Age in years', null=True, verbose_name='Fuel Age')),
                ('fuel_age_unknown', models.BooleanField(default=False, verbose_name='Fuel Age Unknown?')),
                ('ffdi_min', models.PositiveIntegerField(blank=True, verbose_name='FFDI Min')),
                ('ffdi_max', models.PositiveIntegerField(blank=True, verbose_name='FFDI Max')),
                ('gfdi_min', models.PositiveIntegerField(blank=True, verbose_name='GFDI Min')),
                ('gfdi_max', models.PositiveIntegerField(blank=True, verbose_name='GFDI Max')),
                ('grassland_curing_min', models.PositiveIntegerField(blank=True, verbose_name='Grassland Curing Min')),
                ('grassland_curing_max', models.PositiveIntegerField(blank=True, verbose_name='Grassland Curing Max')),
                ('ros_min', models.PositiveIntegerField(blank=True, verbose_name='ROS Min (m/h)')),
                ('ros_max', models.PositiveIntegerField(blank=True, verbose_name='ROS Max (m/h)')),
                ('resources', models.TextField(blank=True, verbose_name='Specialist Resources')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name_plural': 'Lighting Sequences',
                'verbose_name': 'Lighting Sequence',
            },
        ),
        migrations.CreateModel(
            name='OperationalOverview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('overview', models.TextField(blank=True, null=True)),
            ],
            options={
                'get_latest_by': 'id',
            },
        ),
        migrations.CreateModel(
            name='SignInspection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('inspected', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date Inspected')),
                ('comments', models.TextField()),
                ('inspector', models.TextField(verbose_name='Inspecting Officer')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name_plural': 'Sign Inspections',
                'verbose_name': 'Sign Inspection',
            },
        ),
        migrations.CreateModel(
            name='TrafficControlDiagram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('path', models.FileField(storage=django.core.files.storage.FileSystemStorage(base_url='/static/pbs/traffic-control-diagrams/', location='/home/rockyc/work/pbs2/staticfiles/pbs/traffic-control-diagrams'), upload_to='.')),
                ('display_order', models.IntegerField(default=1)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name_plural': 'Traffic Control Diagrams',
                'verbose_name': 'Traffic Control Diagram',
            },
        ),
        migrations.CreateModel(
            name='Way',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=300)),
                ('signs_installed', models.DateField(blank=True, null=True, verbose_name='Signs Installed')),
                ('signs_removed', models.DateField(blank=True, null=True, verbose_name='Signs Removed')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RoadSegment',
            fields=[
                ('way_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='implementation.Way')),
                ('road_type', models.TextField(blank=True, verbose_name='Road Type')),
                ('traffic_considerations', models.TextField(blank=True, verbose_name='Special Traffic Considerations')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name_plural': 'Roads',
                'verbose_name': 'Road',
            },
            bases=('implementation.way',),
        ),
        migrations.CreateModel(
            name='TrailSegment',
            fields=[
                ('way_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='implementation.Way')),
                ('start', models.TextField(blank=True, verbose_name='Start Location')),
                ('start_signage', models.TextField(blank=True, verbose_name='Description of Start Signage')),
                ('stop', models.TextField(blank=True, verbose_name='Stop Location')),
                ('stop_signage', models.TextField(blank=True, verbose_name='Description of Stop Signage')),
                ('diversion', models.BooleanField(default=False, verbose_name='Is there a Diversion Map?')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name_plural': 'Tracks/Trails',
                'verbose_name': 'Track/Trail',
            },
            bases=('implementation.way',),
        ),
        migrations.AddField(
            model_name='way',
            name='creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='implementation_way_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='way',
            name='modifier',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='implementation_way_modified', to=settings.AUTH_USER_MODEL),
        ),
    ]
